# coding: utf-8

"""
    Sherpa API

    Sherpa API  # noqa: E501

    The version of the OpenAPI document: delivered
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sherpa.configuration import Configuration


class Node(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'volume_size': 'int',
        'filesystem': 'str',
        'created_at': 'datetime',
        'created_by': 'str',
        'updated_at': 'datetime',
        'marking': 'str',
        'service': 'str',
        'region': 'str',
        'image': 'str',
        'size': 'str',
        'private_ip': 'str',
        'operations': 'list[object]',
        'enabled_operations': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'volume_size': 'volumeSize',
        'filesystem': 'filesystem',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'updated_at': 'updatedAt',
        'marking': 'marking',
        'service': 'service',
        'region': 'region',
        'image': 'image',
        'size': 'size',
        'private_ip': 'privateIP',
        'operations': 'operations',
        'enabled_operations': 'enabledOperations'
    }

    def __init__(self, id=None, name=None, description=None, volume_size=None, filesystem=None, created_at=None, created_by=None, updated_at=None, marking=None, service=None, region=None, image=None, size=None, private_ip=None, operations=None, enabled_operations=None, local_vars_configuration=None):  # noqa: E501
        """Node - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._volume_size = None
        self._filesystem = None
        self._created_at = None
        self._created_by = None
        self._updated_at = None
        self._marking = None
        self._service = None
        self._region = None
        self._image = None
        self._size = None
        self._private_ip = None
        self._operations = None
        self._enabled_operations = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if volume_size is not None:
            self.volume_size = volume_size
        if filesystem is not None:
            self.filesystem = filesystem
        if created_at is not None:
            self.created_at = created_at
        self.created_by = created_by
        if updated_at is not None:
            self.updated_at = updated_at
        self.marking = marking
        if service is not None:
            self.service = service
        if region is not None:
            self.region = region
        if image is not None:
            self.image = image
        if size is not None:
            self.size = size
        self.private_ip = private_ip
        if operations is not None:
            self.operations = operations
        if enabled_operations is not None:
            self.enabled_operations = enabled_operations

    @property
    def id(self):
        """Gets the id of this Node.  # noqa: E501


        :return: The id of this Node.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.


        :param id: The id of this Node.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Node.  # noqa: E501


        :return: The name of this Node.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.


        :param name: The name of this Node.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Node.  # noqa: E501


        :return: The description of this Node.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Node.


        :param description: The description of this Node.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def volume_size(self):
        """Gets the volume_size of this Node.  # noqa: E501


        :return: The volume_size of this Node.  # noqa: E501
        :rtype: int
        """
        return self._volume_size

    @volume_size.setter
    def volume_size(self, volume_size):
        """Sets the volume_size of this Node.


        :param volume_size: The volume_size of this Node.  # noqa: E501
        :type volume_size: int
        """

        self._volume_size = volume_size

    @property
    def filesystem(self):
        """Gets the filesystem of this Node.  # noqa: E501


        :return: The filesystem of this Node.  # noqa: E501
        :rtype: str
        """
        return self._filesystem

    @filesystem.setter
    def filesystem(self, filesystem):
        """Sets the filesystem of this Node.


        :param filesystem: The filesystem of this Node.  # noqa: E501
        :type filesystem: str
        """

        self._filesystem = filesystem

    @property
    def created_at(self):
        """Gets the created_at of this Node.  # noqa: E501


        :return: The created_at of this Node.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Node.


        :param created_at: The created_at of this Node.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Node.  # noqa: E501


        :return: The created_by of this Node.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Node.


        :param created_by: The created_by of this Node.  # noqa: E501
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def updated_at(self):
        """Gets the updated_at of this Node.  # noqa: E501


        :return: The updated_at of this Node.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Node.


        :param updated_at: The updated_at of this Node.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def marking(self):
        """Gets the marking of this Node.  # noqa: E501


        :return: The marking of this Node.  # noqa: E501
        :rtype: str
        """
        return self._marking

    @marking.setter
    def marking(self, marking):
        """Sets the marking of this Node.


        :param marking: The marking of this Node.  # noqa: E501
        :type marking: str
        """

        self._marking = marking

    @property
    def service(self):
        """Gets the service of this Node.  # noqa: E501


        :return: The service of this Node.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Node.


        :param service: The service of this Node.  # noqa: E501
        :type service: str
        """

        self._service = service

    @property
    def region(self):
        """Gets the region of this Node.  # noqa: E501


        :return: The region of this Node.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Node.


        :param region: The region of this Node.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def image(self):
        """Gets the image of this Node.  # noqa: E501


        :return: The image of this Node.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Node.


        :param image: The image of this Node.  # noqa: E501
        :type image: str
        """

        self._image = image

    @property
    def size(self):
        """Gets the size of this Node.  # noqa: E501


        :return: The size of this Node.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Node.


        :param size: The size of this Node.  # noqa: E501
        :type size: str
        """

        self._size = size

    @property
    def private_ip(self):
        """Gets the private_ip of this Node.  # noqa: E501


        :return: The private_ip of this Node.  # noqa: E501
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this Node.


        :param private_ip: The private_ip of this Node.  # noqa: E501
        :type private_ip: str
        """

        self._private_ip = private_ip

    @property
    def operations(self):
        """Gets the operations of this Node.  # noqa: E501


        :return: The operations of this Node.  # noqa: E501
        :rtype: list[object]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this Node.


        :param operations: The operations of this Node.  # noqa: E501
        :type operations: list[object]
        """

        self._operations = operations

    @property
    def enabled_operations(self):
        """Gets the enabled_operations of this Node.  # noqa: E501


        :return: The enabled_operations of this Node.  # noqa: E501
        :rtype: list[str]
        """
        return self._enabled_operations

    @enabled_operations.setter
    def enabled_operations(self, enabled_operations):
        """Sets the enabled_operations of this Node.


        :param enabled_operations: The enabled_operations of this Node.  # noqa: E501
        :type enabled_operations: list[str]
        """

        self._enabled_operations = enabled_operations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Node):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Node):
            return True

        return self.to_dict() != other.to_dict()

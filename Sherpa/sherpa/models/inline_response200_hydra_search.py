# coding: utf-8

"""
    Sherpa API

    Sherpa API  # noqa: E501

    The version of the OpenAPI document: delivered
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sherpa.configuration import Configuration


class InlineResponse200HydraSearch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'hydratemplate': 'str',
        'hydravariable_representation': 'str',
        'hydramapping': 'list[InlineResponse200HydraSearchHydraMapping]'
    }

    attribute_map = {
        'type': '@type',
        'hydratemplate': 'hydra:template',
        'hydravariable_representation': 'hydra:variableRepresentation',
        'hydramapping': 'hydra:mapping'
    }

    def __init__(self, type=None, hydratemplate=None, hydravariable_representation=None, hydramapping=None, local_vars_configuration=None):  # noqa: E501
        """InlineResponse200HydraSearch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._hydratemplate = None
        self._hydravariable_representation = None
        self._hydramapping = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if hydratemplate is not None:
            self.hydratemplate = hydratemplate
        if hydravariable_representation is not None:
            self.hydravariable_representation = hydravariable_representation
        if hydramapping is not None:
            self.hydramapping = hydramapping

    @property
    def type(self):
        """Gets the type of this InlineResponse200HydraSearch.  # noqa: E501


        :return: The type of this InlineResponse200HydraSearch.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200HydraSearch.


        :param type: The type of this InlineResponse200HydraSearch.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def hydratemplate(self):
        """Gets the hydratemplate of this InlineResponse200HydraSearch.  # noqa: E501


        :return: The hydratemplate of this InlineResponse200HydraSearch.  # noqa: E501
        :rtype: str
        """
        return self._hydratemplate

    @hydratemplate.setter
    def hydratemplate(self, hydratemplate):
        """Sets the hydratemplate of this InlineResponse200HydraSearch.


        :param hydratemplate: The hydratemplate of this InlineResponse200HydraSearch.  # noqa: E501
        :type hydratemplate: str
        """

        self._hydratemplate = hydratemplate

    @property
    def hydravariable_representation(self):
        """Gets the hydravariable_representation of this InlineResponse200HydraSearch.  # noqa: E501


        :return: The hydravariable_representation of this InlineResponse200HydraSearch.  # noqa: E501
        :rtype: str
        """
        return self._hydravariable_representation

    @hydravariable_representation.setter
    def hydravariable_representation(self, hydravariable_representation):
        """Sets the hydravariable_representation of this InlineResponse200HydraSearch.


        :param hydravariable_representation: The hydravariable_representation of this InlineResponse200HydraSearch.  # noqa: E501
        :type hydravariable_representation: str
        """

        self._hydravariable_representation = hydravariable_representation

    @property
    def hydramapping(self):
        """Gets the hydramapping of this InlineResponse200HydraSearch.  # noqa: E501


        :return: The hydramapping of this InlineResponse200HydraSearch.  # noqa: E501
        :rtype: list[InlineResponse200HydraSearchHydraMapping]
        """
        return self._hydramapping

    @hydramapping.setter
    def hydramapping(self, hydramapping):
        """Sets the hydramapping of this InlineResponse200HydraSearch.


        :param hydramapping: The hydramapping of this InlineResponse200HydraSearch.  # noqa: E501
        :type hydramapping: list[InlineResponse200HydraSearchHydraMapping]
        """

        self._hydramapping = hydramapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200HydraSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200HydraSearch):
            return True

        return self.to_dict() != other.to_dict()

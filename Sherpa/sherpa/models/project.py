# coding: utf-8

"""
    Sherpa API

    Sherpa API  # noqa: E501

    The version of the OpenAPI document: delivered
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sherpa.configuration import Configuration


class Project(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'providers': 'object',
        'regions': 'object',
        'marking': 'str',
        'operations': 'list[object]',
        'enabled_operations': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'providers': 'providers',
        'regions': 'regions',
        'marking': 'marking',
        'operations': 'operations',
        'enabled_operations': 'enabledOperations'
    }

    def __init__(self, id=None, name=None, description=None, providers=None, regions=None, marking=None, operations=None, enabled_operations=None, local_vars_configuration=None):  # noqa: E501
        """Project - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._providers = None
        self._regions = None
        self._marking = None
        self._operations = None
        self._enabled_operations = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.description = description
        self.providers = providers
        self.regions = regions
        self.marking = marking
        if operations is not None:
            self.operations = operations
        if enabled_operations is not None:
            self.enabled_operations = enabled_operations

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501


        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def providers(self):
        """Gets the providers of this Project.  # noqa: E501


        :return: The providers of this Project.  # noqa: E501
        :rtype: object
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this Project.


        :param providers: The providers of this Project.  # noqa: E501
        :type providers: object
        """

        self._providers = providers

    @property
    def regions(self):
        """Gets the regions of this Project.  # noqa: E501


        :return: The regions of this Project.  # noqa: E501
        :rtype: object
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this Project.


        :param regions: The regions of this Project.  # noqa: E501
        :type regions: object
        """

        self._regions = regions

    @property
    def marking(self):
        """Gets the marking of this Project.  # noqa: E501


        :return: The marking of this Project.  # noqa: E501
        :rtype: str
        """
        return self._marking

    @marking.setter
    def marking(self, marking):
        """Sets the marking of this Project.


        :param marking: The marking of this Project.  # noqa: E501
        :type marking: str
        """

        self._marking = marking

    @property
    def operations(self):
        """Gets the operations of this Project.  # noqa: E501


        :return: The operations of this Project.  # noqa: E501
        :rtype: list[object]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this Project.


        :param operations: The operations of this Project.  # noqa: E501
        :type operations: list[object]
        """

        self._operations = operations

    @property
    def enabled_operations(self):
        """Gets the enabled_operations of this Project.  # noqa: E501


        :return: The enabled_operations of this Project.  # noqa: E501
        :rtype: list[str]
        """
        return self._enabled_operations

    @enabled_operations.setter
    def enabled_operations(self, enabled_operations):
        """Sets the enabled_operations of this Project.


        :param enabled_operations: The enabled_operations of this Project.  # noqa: E501
        :type enabled_operations: list[str]
        """

        self._enabled_operations = enabled_operations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Project):
            return True

        return self.to_dict() != other.to_dict()
